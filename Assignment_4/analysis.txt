Nicholas Feanny; Naf16b; 

Complexity Analysis of:
void makeEmpty(BinaryNode* &t)

The makeEmpty function specified above uses recursive logic to-- as the name suggest--empty a binary tree. this process is done by moving long the left side of the tree and deleting each node until a null pointer. Once this done and the left most side is removed(popped) from the function stack, the right side of the binary tree will then be removed with a similar process. Because reursive functions can be written in a equivalent manner to iterative loops, this function "worst time complexity" in relation to "Big O" is O(n). This is due to the fact that this specific function runs 2 individual sets of recursive logic (for the left and right side respectively). As such, it is actually to the O(2n), however, in teh grand scheme of things its no different than O(n) as the leading coefficient does not have a massive impact on run time.
